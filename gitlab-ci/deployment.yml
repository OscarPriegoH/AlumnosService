
#================    DEVELOP    ================#
deployToDevelop:
  stage: deployment
  needs: ["docker-build-image"]
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release/
      when: manual

  tags:
      - development-env
  before_script:
    - IMAGE_NAME=$CI_REGISTRY_IMAGE:$( echo "$CI_COMMIT_BRANCH" | cut -d'/' -f 2 )  
    - echo $CI_DEPLOY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "creating develop service " $STACK_NAME
    - docker stack deploy --with-registry-auth  -c docker-compose/base.yml -c docker-compose/development.yml $STACK_NAME
  after_script:
    - docker logout

#================    TESTING    ================#

deployToTest:
  stage: deployment

  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release/
      when: manual
  tags:
      - contenedorestest
  before_script:
    - IMAGE_NAME=$CI_REGISTRY_IMAGE:$( echo "$CI_COMMIT_BRANCH" | cut -d'/' -f 2 )  
    - echo $CI_DEPLOY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "creating testing service " $STACK_NAME
    - docker stack deploy --with-registry-auth  -c docker-compose/base.yml -c docker-compose/testing.yml $STACK_NAME
  after_script:
    - docker logout


#================    STAGING    ================#

deployToStaging:
  stage: deployment
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release/
      when: manual
  tags:
      - staging-env
  before_script:
    - IMAGE_NAME=$CI_REGISTRY_IMAGE:$( echo "$CI_COMMIT_BRANCH" | cut -d'/' -f 2 )  
    - echo $CI_DEPLOY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "creating staging service " $STACK_NAME
    - docker stack deploy --with-registry-auth  -c docker-compose/base.yml -c docker-compose/staging.yml $STACK_NAME
  after_script:
    - docker logout
